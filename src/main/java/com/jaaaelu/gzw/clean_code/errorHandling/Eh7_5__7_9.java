package com.jaaaelu.gzw.clean_code.errorHandling;

public class Eh7_5__7_9 {
    //  7.5 依调用者需要定义异常类

    //  7.6 定义常规流程

    //  7.7 别返回 null 值

    //  作者认为，要讨论错误处理，就一定要提及那些容易引发语法错误的做法。第一项就是返回 null 值

    //  返回 null 值基本上就是给自己增加工作量，也是在给调用添乱，因为只要一处没检查 null 值，程序就会失控

    //  如果返回列表也尽量分拿回空列表而不是 null，Java 提供了 Collections.emptyList()

    //  7.8 别传递 null 值

    //  在方法中返回 null 值是糟糕的做法，但将 null 传递给其他方法就更糟糕了。除非 API 要求你向它传递 null 值，否则就尽可
    //  能避免传递 null 值

    //  7.9 小结

    //  整洁代码是可读的，但也要强固。可读与强固并不冲突。如果将错误处理隔离看待，独立于主要逻辑之外，就能写出强固而整洁
    //  的代码。做到这一步，我们就能单独处理它，也极大地提升了代码的可维护性
}
