package com.jaaaelu.gzw.clean_code.system;

public class S11_3__11_11 {
    //  11.3 扩容

    //  城市由城镇而来，城镇由聚居而来
    //  这种成长并非全无镇痛。你多少次开着车，艰难的穿过一个“道路改善”工程，问自己，“他们为什么不一开始就修条够宽的路呢？！”
    //  谁敢打包票说在一个小镇修建一条六车道的公路并不浪费呢？

    //  “一开始就做对系统”属于神话。反之我们应该只去实现金的用户故事，然后重构，明天再扩展系统、实现新的用户故事

    //  11.4 Java 代理

    //  Java 代理适用于简单的情况，例如在单独的对象或类中包装方法调用

    //  11.5 纯 Java AOP 框架

    //  11.6 AspectJ 的方面

    //  11.7 测试驱动系统架构

    //  概言之，最佳的系统架构有模块化的关注面领域组成，每个关注面均用纯 Java（或其他语言）对象实现。不同的领域之间用最不
    //  具有侵害性的方面或者类方面工具整合起来。这种架构能测试驱动，就像代码一样

    //  11.8 优化决策

    //  模块化和关注面切分成就了分散化管理和决策

    //  11.9 明智使用添加了可论证价值的标准

    //  11.10 系统需要领域特定语言

    //  DSL 在有效使用时能提升代码惯用法和设计模式之上的抽象层次，它允许开发者在恰当的抽象层级上直指代码的初衷

    //  11.11 小结

    //  系统也应该是整洁的。侵害性架构会湮灭领域逻辑，冲击敏捷能力

    //  在所有的抽象层级上，意图都应清晰可辨

    //  无论是设计系统或单独的模块，别忘了大概可工作的最简单方案
}
