package com.jaaaelu.gzw.clean_code.unitTest;

public class Ut9_1__9_2 {
    //  9.1 TDD（测试驱动开发） 三定律

    //  定律一：在编写不能通过的单元测试前，不可编写生产代码
    //  定律二：只可编写刚好无法通过的单元测试，不能编译也算不通过
    //  定律三：只可编写刚好足以通过当前失败测试的生产代码

    //  9.2 保持测试整洁

    //  脏测试等同于——如果不是坏于的话——没测试。问题在于测试必须随生产代码的眼镜而修改。测试越脏，就越难修改
    //  测试代码和生产代码一样重要，它需要被思考、被设计和被照料。它该像生产代码一般保持整洁

    //  在测试中，你能考务估计的改进架构和设计。测试越脏，代码就会变得越脏。最终，当你丢失了测试，代码也就开始腐坏了
}
